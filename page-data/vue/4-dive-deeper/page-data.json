{"componentChunkName":"component---src-templates-docs-js","path":"/vue/4-dive-deeper","result":{"data":{"site":{"siteMetadata":{"title":"Style guides and learning materials for devs, to build lightning fast apps ðŸš€ | learningHub","docsLocation":"https://github.com/neoito-hub/learningHub"}},"mdx":{"fields":{"id":"b4d95ea3-9f5b-507a-b123-d4441a51a269","title":"4 Dive Deeper","slug":"/vue/4-dive-deeper"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Diving deep into Vue.js\"), mdx(\"p\", null, \"So, we've successfully completed the training project on Vue.js , which taught us some cool features of Vue.js . Now it's time to learn more and enjoy Vue.js. We're gonna make a to-do list app which will surely help you deep diver into Vue.js. Time to start the new project!\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"~$ vue create TodoApp\\n\")), mdx(\"p\", null, \"In the presets screen, this time we need more features. So let's manually select features this time. Select \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vuex\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"router\"), \" from the available options other than the by default selected \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Babel\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Linter/Formatter\"), \". On the next screen, select 'use history mode'. The default mode is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hash\"), \" mode, which uses the url hash to simulate the full URL so that the page won't be reloaded when URL changes. Why select \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"history\"), \" mode? Well, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"history\"), \" mode gets rid of the URL hash and implements the same functionality, i.e., preventing page reload when URL changes. It's made possible by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"history.pushState\"), \" API . However, you won't be needing to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"history.pushState\"), \" directly, coz, there's a build-in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<router-link>\"), \" component in Vue.js which makes routing easy for us, and we can use it.\"), mdx(\"p\", null, \"On the next screen pick the defaut selected \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ESLint with error prevention only\"), \". We only need that. Next screen will ask you something. Select \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \". Done! We've created an App with the required features for our Todo App. Now we just have to edit the created app to implement a todo list.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"~$ cd TodoApp\\n~$ npm run serve\\n\")), mdx(\"p\", null, \"Check out the page hosted on your localhost. You can see a Navbar which directs you to Home or About Page and the active page has a different color. Cool isn't it? Now we have to edit this to create our original todolist app. Before we clear out the current contents, let's head to the app directory/src/ and check what's new in it. \"), mdx(\"p\", null, \"We can see new directories named 'views', 'store' and 'router'. The 'views' directory is the place we store our single page components. The 'store' directory is the place where we handle the states. And finally, the 'router' directory contains a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.js\"), \" file, which contains the details about the routes our app has. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main.js\"), \" file now imports two new files, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"router\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"store\"), \". Let's see how's the Navbar implemented inside the App.vue. \"), mdx(\"p\", null, \"App.vue:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-vue\"\n  }), \"<template> <!--Part of interest starts here-->\\n  <div id=\\\"app\\\">\\n    <div id=\\\"nav\\\">\\n      <router-link to=\\\"/\\\">Home</router-link> |\\n      <router-link to=\\\"/about\\\">About</router-link>\\n    </div>\\n    <router-view/>\\n  </div>\\n</template>\\n\\n<style>\\n  #app {\\n    font-family: Avenir, Helvetica, Arial, sans-serif;\\n    -webkit-font-smoothing: antialiased;\\n    -moz-osx-font-smoothing: grayscale;\\n    text-align: center;\\n    color: #2c3e50;\\n  }\\n\\n  #nav {\\n    padding: 30px;\\n  }\\n\\n  #nav a {\\n    font-weight: bold;\\n    color: #2c3e50;\\n  }\\n\\n  #nav a.router-link-exact-active { /*Part of interest 2 starts here*/\\n    color: #42b983;\\n  }\\n</style>\\n\")), mdx(\"p\", null, \"We've got a 2 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<router-link>\"), \" tags and a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<router-view>\"), \" tag. Both are vue built-in components. We've discussed earlier that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<router-link>\"), \" is used for navigation without page refresh. Look at how the navigation is done. There's a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"to\"), \" attribute in which we specify to where we should navigate. Now check inside the style tag for part of interest 2, you can see some style applied to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"a.router-link-exact-active\"), \". This gives the style to the current active \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<router-link>\"), \" in the Navbar. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"router-link-exact-active\"), \" is applied over the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<router-link>\"), \" in the navbar, when the current URL matches exactly with the route defined on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"to\"), \" attribute of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"router-link\"), \". There's also another class, which is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"router-link-active\"), \" which is applied over a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"router-link\"), \" when the current URL starts with the route path defined in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"to\"), \" attribute. Let's make it more clear with the current situation. One of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<router-link>\"), \" tags here have been referenced to the path '/about' isn't it? The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"router-link-exact-active\"), \" class is applied if and only if we are on the URL http://localhost:PORT/about. But the class \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"router-link-active\"), \" will be applied for the following URL:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"http://localhost:PORT/about\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"http://localhost:PORT/about/contact\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"http://localhost:PORT/about/help\"))), mdx(\"h2\", null, \"router-view\"), mdx(\"p\", null, \"You'll be wondering what's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<router-view>\"), \" now. Don't worry, I'm here. Before that, let's check the contents of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.js\"), \" inside the /src/router directory.\"), mdx(\"p\", null, \"/src/router/index.js:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import Vue from 'vue'\\nimport VueRouter from 'vue-router'\\nimport Home from '../views/Home.vue'\\n\\nVue.use(VueRouter)\\n\\nconst routes = [\\n  {\\n    path: '/',\\n    name: 'Home',\\n    component: Home\\n  },\\n  {\\n    path: '/about',\\n    name: 'About',\\n    // route level code-splitting\\n    // this generates a separate chunk (about.[hash].js) for this route\\n    // which is lazy-loaded when the route is visited.\\n    component: () => import('../views/About.vue')\\n  }\\n]\\n\\nconst router = new VueRouter({\\n  mode: 'history',\\n  base: process.env.BASE_URL,\\n  routes\\n})\\n\\nexport default router\\n\")), mdx(\"p\", null, \"This file imports 4 files. You can only find 3 no? One is inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"routes\"), \" array. Two files, namely \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Vue\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"VueRouter\"), \", are imported for the functional purpose of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vue-router\"), \". \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Vue.use(VueRouter)\"), \" activates the router module in the app. Now, to the important path. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"routes\"), \" array. Each object inside the array defines a particular route. The first Object defines the properties of route '/'. The route is named 'Home'. Also there's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"component\"), \" property which is defined as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Home\"), \". This \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Home\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Home.vue\"), \" is the component or page which will be rendered when we are on the URL http://localhost:PORT/. Easy isn't it? Look at the third imported file. No Magic there, it's the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Home\"), \" page imported from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"views\"), \" directory, which contains all the single page components. The second route object named 'About' has the route \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"path\"), \" defined as '/about' and /src/views/About.vue file imported as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"component\"), \". What did you learn from all this? \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Every route is defined with a Vue Component which will be rendered when the browser is in the exact path which is defined in that route\"), \". Also you've to import every component registered to each routes inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.js\"), \" of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/src/router/\"), \" directory.\"), mdx(\"p\", null, \"Now, back to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<router-view\"), \", what exactly does \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<router-view>\"), \" do? The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<router-view>\"), \" is the placeholder tag where the component registered in the active route renders. Got it? Let's make it simple for you. When the URL is http://localhost:PORT/, the route named 'Home' is matched, and the component registered in that route, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Home\"), \", is rendered in the place of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<router-view>\"), \" tag. Similarly, On http://localhost:PORT/about, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"About\"), \" component is rendered in place of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<router-view>\"), \". If I'm still not clear, you can check the browser developer tools(Ctrl + Shift + I) in the Elements Tab, comparing to the App.vue file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<template>\"), \". That'll give you an approximate idea on what's happening. So, now you've learned how routing works. Just create your app with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Vue-router\"), \" feature, define your routes and components inside the router \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.js\"), \" file, use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<router-link>\"), \" to navigate between pages and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<router-view>\"), \" renders the current page inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.vue\"), \". A nice little summary. You can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<router-link>\"), \" to provide clickable links in the page for navigation. What about programmatically navigating? Suppose, you have to redirect from a page when a certain condition is satisfied. We cannot handle that situation with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<router-link>\"), \". For that purpose, we can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$router.push()\"), \" API. The argument of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$router.push()\"), \" API can be the following:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"$router.push('/') // Reroutes to Home Page\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"$router.push({name:'About'}) // Reroutes to about page\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"$router.push({path:'/about'}) // About page\"))), mdx(\"p\", null, \"Simple as that. Things will become more handy when we go further forward. If you have time, just wander around in our app directory and try to link things together, understand how everything is placed and their positions. Now let's move on to actual programming than learning.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#diving-deep-into-vuejs","title":"Diving deep into Vue.js","items":[{"url":"#router-view","title":"router-view"}]}]},"parent":{"__typename":"File","relativePath":"vue/4-dive-deeper.md"},"frontmatter":{"metaTitle":null,"metaDescription":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/angular","title":"Angular"}}},{"node":{"fields":{"slug":"/git","title":"Git"}}},{"node":{"fields":{"slug":"/","title":"Developer's Guide"}}},{"node":{"fields":{"slug":"/js-concept-list","title":"Js Concept List"}}},{"node":{"fields":{"slug":"/linux","title":"Linux"}}},{"node":{"fields":{"slug":"/nativescript","title":"Nativescript"}}},{"node":{"fields":{"slug":"/newcomers-references","title":"Newcomers References"}}},{"node":{"fields":{"slug":"/newcomers","title":"Newcomers"}}},{"node":{"fields":{"slug":"/python","title":"Python"}}},{"node":{"fields":{"slug":"/react","title":"React"}}},{"node":{"fields":{"slug":"/style-guide","title":"Style Guide"}}},{"node":{"fields":{"slug":"/ui-mastery","title":"Ui Mastery"}}},{"node":{"fields":{"slug":"/vue","title":"Vue"}}},{"node":{"fields":{"slug":"/linux/shell","title":"Shell"}}},{"node":{"fields":{"slug":"/react/Tutorial","title":"Tutorial - Beginner"}}},{"node":{"fields":{"slug":"/ui-mastery/1-Introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/ui-mastery/10-workshop-practice-2","title":"Workshop practice 2"}}},{"node":{"fields":{"slug":"/ui-mastery/11-SASS-introduction","title":"SASS"}}},{"node":{"fields":{"slug":"/ui-mastery/12-SCSS-introduction","title":"SCSS"}}},{"node":{"fields":{"slug":"/ui-mastery/13-workshop-practice-3","title":"Workshop practice 3"}}},{"node":{"fields":{"slug":"/ui-mastery/14-UI-debug-tools","title":"UI Debug Tools"}}},{"node":{"fields":{"slug":"/ui-mastery/15-Optimization","title":"Optimization"}}},{"node":{"fields":{"slug":"/ui-mastery/16-UI-standards","title":"UI standards"}}},{"node":{"fields":{"slug":"/ui-mastery/17-progressive-web-apps","title":"Progressive web apps"}}},{"node":{"fields":{"slug":"/ui-mastery/18.workshop-practice-1","title":"Workshop practice 1"}}},{"node":{"fields":{"slug":"/ui-mastery/19-workshop-practice-2","title":"Workshop practice 2"}}},{"node":{"fields":{"slug":"/ui-mastery/19-workshop-practice-3","title":"Workshop practice 3"}}},{"node":{"fields":{"slug":"/ui-mastery/2-HTML","title":"HTML"}}},{"node":{"fields":{"slug":"/ui-mastery/22-workshop-practise-4","title":"Workshop practice 4"}}},{"node":{"fields":{"slug":"/ui-mastery/23-workshop-practise-5","title":"Workshop practice 5"}}},{"node":{"fields":{"slug":"/ui-mastery/24-workshop-practise-6","title":"Workshop practice 6"}}},{"node":{"fields":{"slug":"/ui-mastery/25-workshop-practise-7","title":"Workshop practice 7"}}},{"node":{"fields":{"slug":"/ui-mastery/26-workshop-practise-8","title":"Workshop practice 8"}}},{"node":{"fields":{"slug":"/ui-mastery/3-HTML-Accessibility","title":"HTML Accessibility"}}},{"node":{"fields":{"slug":"/ui-mastery/4-CSS","title":"CSS"}}},{"node":{"fields":{"slug":"/ui-mastery/5-CSS-Naming","title":"Naming Standard - BEM"}}},{"node":{"fields":{"slug":"/ui-mastery/6-JS-basics","title":"JS basics"}}},{"node":{"fields":{"slug":"/ui-mastery/7-flexbox-and-media-query","title":"Learn CSS Flexbox & Media Queries"}}},{"node":{"fields":{"slug":"/ui-mastery/8.workshop-practice-1","title":"Workshop practice 1"}}},{"node":{"fields":{"slug":"/ui-mastery/9-Introduction-of-bootstrap","title":"Bootstrap Basics"}}},{"node":{"fields":{"slug":"/vue/1-what-and-why-Vue","title":"1 What And Why Vue"}}},{"node":{"fields":{"slug":"/vue/2-getting-started","title":"2 Getting Started"}}},{"node":{"fields":{"slug":"/vue/3-data-and-props","title":"3 Data And Props"}}},{"node":{"fields":{"slug":"/vue/4-dive-deeper","title":"4 Dive Deeper"}}},{"node":{"fields":{"slug":"/vue/5-getting-started-chapter-2","title":"5 Getting Started Chapter 2"}}},{"node":{"fields":{"slug":"/vue/6-the-final-problem-part-2","title":"6 The Final Problem Part 2"}}},{"node":{"fields":{"slug":"/vue/7-conclusion","title":"7 Conclusion"}}},{"node":{"fields":{"slug":"/react/Tutorial/1-what-and-why-react","title":"1 What And Why React"}}},{"node":{"fields":{"slug":"/react/Tutorial/2-setting-things-up","title":"2 Setting Things Up"}}},{"node":{"fields":{"slug":"/react/Tutorial/3-states-props-and-more-part1","title":"3 States Props And More Part 1"}}},{"node":{"fields":{"slug":"/react/Tutorial/4-states-props-and-more-part2","title":"4 States Props And More Part 2"}}},{"node":{"fields":{"slug":"/react/Tutorial/5-useEffect","title":"5 Use Effect"}}},{"node":{"fields":{"slug":"/react/Tutorial/6-conclusion","title":"6 Conclusion"}}},{"node":{"fields":{"slug":"/react/style-guide/style-guide","title":"Style Guide"}}}]}},"pageContext":{"id":"b4d95ea3-9f5b-507a-b123-d4441a51a269"}}}