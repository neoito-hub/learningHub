{"componentChunkName":"component---src-templates-docs-js","path":"/react/Tutorial/3-states-props-and-more-part1","result":{"data":{"site":{"siteMetadata":{"title":"Style guides and learning materials for devs, to build lightning fast apps ðŸš€ | learningHub","docsLocation":"https://github.com/neoito-hub/learningHub"}},"mdx":{"fields":{"id":"8d767a5e-e351-52b4-8110-e8c67dac9cea","title":"3 States Props And More Part 1","slug":"/react/Tutorial/3-states-props-and-more-part1"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h4\", null, \"State\"), mdx(\"p\", null, \"Let's start with state\"), mdx(\"p\", null, \"State can be defined as the heart of a componet, this is actually a javascript object. state is what allows us to make our components dynamic and interactive and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"when the state object changes, component re renders\")), mdx(\"h4\", null, \"And here come's Props\"), mdx(\"p\", null, \"Props stands for properties. Props are also javascript object but the key difference is that props gets passed to the component where the state is managed with in the component.\"), mdx(\"p\", null, \"\\uD83D\\uDE15\\uD83D\\uDE1F\\uD83D\\uDE1F, confused ? Let's spread it over some code\"), mdx(\"p\", null, \"So we are gonna build our web-series-app from here onwards and we will be sticking to functional components.\"), mdx(\"p\", null, \"we will be using materialize to style our html elements, so head to our index.html file and add the below snippet to the head section.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"<link rel=\\\"stylesheet\\\" href=\\\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css\\\">\\n\\n\")), mdx(\"p\", null, \"Styling react components itself can be made as a section but here for simplicity we are using materialize. There exist dedicated styling and UI libraries for react. we will take a look at it by the end of this quick intro course.\"), mdx(\"p\", null, \"Now head to our App.js and make an HTML form, so our code is as follows \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"import React from 'react';\\n\\nfunction App() {\\n  return(\\n  <div className=\\\"row container\\\">\\n        <form >\\n          <h4>Web Series App</h4>\\n          <div className=\\\"row\\\">\\n            <div className=\\\"col s9\\\">\\n              <input value=\\\"\\\" type=\\\"text\\\" />\\n            </div>\\n            <div className=\\\"col s3\\\">\\n              <button className=\\\"btn\\\" type=\\\"submit\\\">Save</button>\\n            </div>\\n\\n          </div>\\n        </form>\\n        <ul className=\\\"collection\\\">\\n         <li>hai</li>\\n        </ul>\\n      </div>\\n  )\\n}\\nexport default App;\\n\")), mdx(\"p\", null, \"Try typing a web series name, well not able to type right? well you need to add onChange event to to the input field, its the same onchange in javascript but camel-cased.\"), mdx(\"p\", null, \"Then another problem ? we need to store the value of input field when onChange is triggered, right? \"), mdx(\"h4\", null, \"The answer is State\"), mdx(\"p\", null, \"we will be attaching a function to on change to store the value in state. so to use and manipulate state in functional component we will be using a hook called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"useState\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Hooks are the functions which \\\"hook into\\\" React state and lifecycle features from function components\")), mdx(\"p\", null, \"so lets use the useState hook, you can import it at the top like\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"import React, { useState } from 'react';\\n// {useState} is named import here\\n\")), mdx(\"p\", null, \"or we can access it by \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"React.useState\")), mdx(\"p\", null, \"Let's modify our code now, inside our App function write the following\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"  const [seriesName, setSeriesName] = useState('');\\n  \\n\")), mdx(\"p\", null, \"/\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \" The useState function takes a default value, here its '' and returns two array elements containing the state variable and a function to set a value to the state variable.\\nOne major thing to note is that state in react should be immutable and react works in a one way binding mechanism\\n\"), \"/\"), mdx(\"p\", null, \"  now we have to modify our code to incorporate the onChange event,\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"import React from 'react';\\n\\nfunction App() {\\n    // state variable and a function to change the state\\n    const [seriesName, setSeriesName] = React.useState('');\\nreturn(\\n  <div className=\\\"row container\\\">\\n        <form>\\n          <h4>Web Series App - {seriesName}</h4>\\n          <div className=\\\"row\\\">\\n            <div className=\\\"col s9\\\">\\n              <input value={seriesName} type=\\\"text\\\" onChange={(e) => { setSeriesName(e.target.value) }}/>\\n            </div>\\n            <div className=\\\"col s3\\\">\\n              <button className=\\\"btn\\\" type=\\\"submit\\\">Save</button>\\n            </div>\\n\\n          </div>\\n        </form>\\n        <ul className=\\\"collection\\\">\\n         <li>hai</li>\\n        </ul>\\n      </div>\\n)\\n}\\nexport default App;\\n\")), mdx(\"p\", null, \"/\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \" you may have noticied that we have put the state seriesName in some places in between curley braces, {state}. to access a state or function inside JSX you have to put it inside curley braces \"), \"/\"), mdx(\"p\", null, \"Now if you type some thing the onChange event will trigger and it updates the state using the setSeriesName function and the new state will set on seriesName. where ever you use the seriesName state inside the JSX the value will automatically change on update.\"), mdx(\"p\", null, \"Head to the dev tools and inspect the input, when you type the state changes and it causes re render, but efficent re render only the place's where the state is used is updated :).\"), mdx(\"p\", null, \"Great, so we now know about state and how to manipulate it.\\nNow for our series app we need to add these values to an array and loop through it somehwere in our code and show it.\"), mdx(\"p\", null, \"so let's create another state to hold the values of the Series Names being submitted via form submit.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"  const [seriesList, setSeriesList] = useState([]);\\n\")), mdx(\"p\", null, \"now define a function which will be triggered on onSubmit event of form\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"\\n  const saveSeries = (e) => {\\n    e.preventDefault();\\n    const series = {\\n      name: seriesName,\\n      id: +new Date()\\n    }\\n    setSeriesList([...seriesList, series]);\\n    setSeriesName('');\\n  }\\n  /* we block the default behaviour of form submit here\\n  then makes an object which contains the name of series which is\\n  in the state, remember whenever we type in the input field, \\n  that series name is being stored in the seriesName state.\\n\\n  Then we use the setSeriesList function to add the new object to the list of series name. The  ... is called spread operator(JS stuff), basically here we spreads all data in the seriesList array and adds the new object to it and a new array of object is made and that is set o the seriesList state.\\n\")), mdx(\"p\", null, \"So our final code will be like\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"import React, {useState} from 'react';\\n\\nfunction App() {\\n    // state variable and a function to change the state\\n    const [seriesName, setSeriesName] = React.useState('');\\n    const [seriesList, setSeriesList] = useState([]);\\n\\n    //onsubmit we call this \\n      const saveSeries = (e) => {\\n        e.preventDefault();\\n        const series = {\\n          name: seriesName,\\n          id: +new Date()\\n        }\\n        setSeriesList([...seriesList, series]);\\n        setSeriesName('');\\n      }\\nreturn(\\n  <div className=\\\"row container\\\">\\n        <form onSubmit={saveSeries}> {/* here (saveSeries) we are refering to the function not invoking it*/}\\n\\n          <h4>Web Series App - {seriesName}</h4>\\n          <div className=\\\"row\\\">\\n            <div className=\\\"col s9\\\">\\n              <input value={seriesName} type=\\\"text\\\" onChange={(e) => { setSeriesName(e.target.value) }}/>\\n            </div>\\n            <div className=\\\"col s3\\\">\\n              <button className=\\\"btn\\\" type=\\\"submit\\\">Save</button>\\n            </div>\\n\\n          </div>\\n        </form>\\n        <ul className=\\\"collection\\\">\\n         <li>hai</li>\\n        </ul>\\n      </div>\\n)\\n}\\nexport default App;\\n\")), mdx(\"p\", null, \"Now we are going to show the series name in an ul so our unordered list becomes\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"<ul className=\\\"collection\\\">\\n        {seriesList.map((item) => {\\n          return <li className=\\\"collection-item\\\" key={item.id}>{item.name}</li>\\n        })}\\n</ul>\\n\")), mdx(\"p\", null, \"Perfect, so we learned how to use the useState hook, how to manipulate state, how to use events in JSX, how to access state in JSX and how to loop and show some array values inside JSX\"), mdx(\"p\", null, \"Next we will move our ul to another component, which brings us the another two categories of components \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Smart Components (Containers)\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Dumb Components (Presentational Components)\")), mdx(\"p\", null, \"then\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Props\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"useEffect\")), mdx(\"p\", null, \"in the next session we will be exploring these, so try making this or varients of the code snippet and try converting it into class based component :).\"), mdx(\"p\", null, \"check this link to figure out how to use state in class based component : \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.youtube.com/watch?v=34fE23aib1o\"\n  }), \"State in react\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#state","title":"State"},{"url":"#and-here-comes-props","title":"And here come's Props"},{"url":"#the-answer-is-state","title":"The answer is State"}]},"parent":{"__typename":"File","relativePath":"react/Tutorial/3-states-props-and-more-part1.md"},"frontmatter":{"metaTitle":null,"metaDescription":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/angular","title":"Angular"}}},{"node":{"fields":{"slug":"/git","title":"Git"}}},{"node":{"fields":{"slug":"/","title":"Developer's Guide"}}},{"node":{"fields":{"slug":"/js-concept-list","title":"Js Concept List"}}},{"node":{"fields":{"slug":"/linux","title":"Linux"}}},{"node":{"fields":{"slug":"/nativescript","title":"Nativescript"}}},{"node":{"fields":{"slug":"/newcomers-references","title":"Newcomers References"}}},{"node":{"fields":{"slug":"/newcomers","title":"Newcomers"}}},{"node":{"fields":{"slug":"/python","title":"Python"}}},{"node":{"fields":{"slug":"/react","title":"React"}}},{"node":{"fields":{"slug":"/style-guide","title":"Style Guide"}}},{"node":{"fields":{"slug":"/ui-mastery","title":"Ui Mastery"}}},{"node":{"fields":{"slug":"/vue","title":"Vue"}}},{"node":{"fields":{"slug":"/linux/shell","title":"Shell"}}},{"node":{"fields":{"slug":"/react/Tutorial","title":"Tutorial - Beginner"}}},{"node":{"fields":{"slug":"/ui-mastery/1-Introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/ui-mastery/10-workshop-practice-2","title":"Workshop practice 2"}}},{"node":{"fields":{"slug":"/ui-mastery/11-SASS-introduction","title":"SASS"}}},{"node":{"fields":{"slug":"/ui-mastery/12-SCSS-introduction","title":"SCSS"}}},{"node":{"fields":{"slug":"/ui-mastery/13-workshop-practice-3","title":"Workshop practice 3"}}},{"node":{"fields":{"slug":"/ui-mastery/14-UI-debug-tools","title":"UI Debug Tools"}}},{"node":{"fields":{"slug":"/ui-mastery/15-Optimization","title":"Optimization"}}},{"node":{"fields":{"slug":"/ui-mastery/16-UI-standards","title":"UI standards"}}},{"node":{"fields":{"slug":"/ui-mastery/17-progressive-web-apps","title":"Progressive web apps"}}},{"node":{"fields":{"slug":"/ui-mastery/18.workshop-practice-1","title":"Workshop practice 1"}}},{"node":{"fields":{"slug":"/ui-mastery/19-workshop-practice-2","title":"Workshop practice 2"}}},{"node":{"fields":{"slug":"/ui-mastery/19-workshop-practice-3","title":"Workshop practice 3"}}},{"node":{"fields":{"slug":"/ui-mastery/2-HTML","title":"HTML"}}},{"node":{"fields":{"slug":"/ui-mastery/22-workshop-practise-4","title":"Workshop practice 4"}}},{"node":{"fields":{"slug":"/ui-mastery/23-workshop-practise-5","title":"Workshop practice 5"}}},{"node":{"fields":{"slug":"/ui-mastery/24-workshop-practise-6","title":"Workshop practice 6"}}},{"node":{"fields":{"slug":"/ui-mastery/25-workshop-practise-7","title":"Workshop practice 7"}}},{"node":{"fields":{"slug":"/ui-mastery/26-workshop-practise-8","title":"Workshop practice 8"}}},{"node":{"fields":{"slug":"/ui-mastery/3-HTML-Accessibility","title":"HTML Accessibility"}}},{"node":{"fields":{"slug":"/ui-mastery/4-CSS","title":"CSS"}}},{"node":{"fields":{"slug":"/ui-mastery/5-CSS-Naming","title":"Naming Standard - BEM"}}},{"node":{"fields":{"slug":"/ui-mastery/6-JS-basics","title":"JS basics"}}},{"node":{"fields":{"slug":"/ui-mastery/7-flexbox-and-media-query","title":"Learn CSS Flexbox & Media Queries"}}},{"node":{"fields":{"slug":"/ui-mastery/8.workshop-practice-1","title":"Workshop practice 1"}}},{"node":{"fields":{"slug":"/ui-mastery/9-Introduction-of-bootstrap","title":"Bootstrap Basics"}}},{"node":{"fields":{"slug":"/vue/1-what-and-why-Vue","title":"1 What And Why Vue"}}},{"node":{"fields":{"slug":"/vue/2-getting-started","title":"2 Getting Started"}}},{"node":{"fields":{"slug":"/vue/3-data-and-props","title":"3 Data And Props"}}},{"node":{"fields":{"slug":"/vue/4-dive-deeper","title":"4 Dive Deeper"}}},{"node":{"fields":{"slug":"/vue/5-getting-started-chapter-2","title":"5 Getting Started Chapter 2"}}},{"node":{"fields":{"slug":"/vue/6-the-final-problem-part-2","title":"6 The Final Problem Part 2"}}},{"node":{"fields":{"slug":"/vue/7-conclusion","title":"7 Conclusion"}}},{"node":{"fields":{"slug":"/react/Tutorial/1-what-and-why-react","title":"1 What And Why React"}}},{"node":{"fields":{"slug":"/react/Tutorial/2-setting-things-up","title":"2 Setting Things Up"}}},{"node":{"fields":{"slug":"/react/Tutorial/3-states-props-and-more-part1","title":"3 States Props And More Part 1"}}},{"node":{"fields":{"slug":"/react/Tutorial/4-states-props-and-more-part2","title":"4 States Props And More Part 2"}}},{"node":{"fields":{"slug":"/react/Tutorial/5-useEffect","title":"5 Use Effect"}}},{"node":{"fields":{"slug":"/react/Tutorial/6-conclusion","title":"6 Conclusion"}}},{"node":{"fields":{"slug":"/react/style-guide/style-guide","title":"Style Guide"}}}]}},"pageContext":{"id":"8d767a5e-e351-52b4-8110-e8c67dac9cea"}}}